#! /bin/sh
# Manage git tokens with password encrypted files.
#
# Author: Kaj Munhoz Arfvidsson


###############
## CONSTANTS ##
###############


DATA_DIR="$HOME/.local/share/git-token"


###############
## FUNCTIONS ##
###############


usage() {
    echo 'Usage: git-token [OPTIONS] USERNAME [TOKEN]'
}

help() {
    usage
    cat << EOF
Manage git tokens with password protected files.

OPTIONS
    -h, --help          Show this help message.
    -e, --enable        Enable git credential-cache in globally.
    -t SEC              Set git credential-cache timeout to SECONDS, only used
        --timeout=SEC     with -e option (default "900").
    -r, --remove        Remove token with name USERNAME.
    -u URL              Set the git domain url, must be used with password
        --url=URL         decryption (default "github.com").
    -f, --force         Write over any existing token.
        --only-token    Do not save or automatically set name/email, only used
                          when saving a new token.

To save a token: git-token adam xxyyzz
The program will encrypt with gnupg a file named "adam" containing "xxyyzz" to
the directory ~/.local/share/git-token. By supplying name and email the user
can rest assured it is he/she that is the author as git-token will automatically
set update git-config with name and email during token retrieval.

To load a token: git-token adam
The program will try to decrypt the file ~/.local/share/git-token/adam, print
the contents, and call git credential to save the login credentials for a
limited time.
EOF
}

# Return the argument at index
# > index [-]NUM [ARGS...]
index() {
    [ $# -lt 2 ] && return 1
    [ $1 -gt 0 ] && i=$1 || i=$(($# + $1))
    [ $i -le 0 ] && echo "" || ( shift $i && echo "$1" )
}

# Print error and exit
# > panic [CODE] MESSAGE
panic() {
    [ $# -gt 1 ] && CODE=$1 && shift || CODE=1
    echo "Error ($CODE): $1"
    usage
    exit $CODE
}

# Climb directories to find an existing path CHILD
# > climb CHILD [ PARENT ]
climb() {
    CHILD="$1"
    PARENT="$(realpath "${2:-$PWD}")"
    [ -e "$PARENT/$CHILD" ] && echo "$PARENT" && return 0
    [ "$PARENT" = "/" ] && return 1
    climb "$CHILD" "$PARENT/.."
    return $?
}

# Assert there exist commands
# > assert_command [COMMANDS...]
assert_command() {
    for cmd in "$@"; do
        [ ! "$(command -v "$cmd")" ] && panic "Missing command \"$cmd\". Is it installed?"
    done
}

# Prompt user of something
# > prompt VAR MESSAGE
prompt() {
    VAR="$1"
    shift
    printf "$*"
    read -r "$VAR"
}

# Prompt user of something that shouldn't be echoed
# > prompt_secret VAR MESSAGE
prompt_secret() {
    stty -echo
    prompt "$@"
    stty echo
    printf "\n"
}

# Enable git credentials
_enable() {
    git config --global credential.helper "cache --timeout $1" || exit $?
}

# Remove user token
_remove() {
    rm -r "$DATA_DIR/$1" || exit $?
}

# Approve git credential with _approve URL USERNAME PASSWORD
_approve() {
    git credential approve << EOF
url=$1
username=$2
password=$3
EOF
return $?
}

_get_last_author() {
    git log -1 --pretty=format:'%an <%ae>'
}


############
## SCRIPT ##
############


assert_command git gpg

# program arguments
REMOVE=0
ENABLE=0
FORCE=0
TIMEOUT=900
URL="https://github.com"
ONLY_TOKEN=0
USERNAME=""
TOKEN=""
NAME=""
EMAIL=""

# parse program arguments
while getopts ":herfd:-:" OPT; do
    if [ "$OPT" = "-" ]; then
        OPT="${OPTARG%%=*}"
        OPTARG="${OPTARG#$OPT}"
        OPTARG="${OPTARG#=}"
    fi
    case $OPT in
        h | help ) help ; exit 0 ;;
        e | enable) ENABLE=1 ;;
        t | timeout) TIMEOUT="$OPTARG" ;;
        r | remove) REMOVE=1 ;;
        u | url)
            URL="$OPTARG"
            [ -z "$URL" ] && panic "Missing argument to \"$OPT\""
            ;;
        f | force) FORCE=1 ;;
        only-token ) ONLY_TOKEN=1 ;;
        : ) panic "Missing argument to \"$OPTARG\"" ;;
        * ) panic "Unrecognized option \"$OPTARG\"" ;;
    esac
done
shift $((OPTIND-1))

# get program positional arguments
case "$#" in
    0 )
        [ "$ENABLE" -ne 0 ] && _enable "$TIMEOUT" && exit 0
        panic "Missing argument USERNAME"
        ;;
    1 )
        USERNAME=$1
        [ $ENABLE -ne 0 ] && _enable "$TIMEOUT"
        [ $REMOVE -ne 0 ] && _remove "$USERNAME" && exit 0
        ;;
    2 )
        USERNAME=$1
        TOKEN=$2
        [ $ENABLE -ne 0 ] && _enable "$TIMEOUT"
        [ $REMOVE -ne 0 ] && echo "Replacing token for \"$USERNAME\"" && _remove "$USERNAME"
        ;;
    * )
        panic "Too many arguments"
        ;;
esac

# get token from stdin if the token is, e.g. piped in
[ -p /dev/stdin ] && read -r TOKEN

if [ -n "$TOKEN" ]
then # encrypt

    if [ -d "$DATA_DIR/$USERNAME" ]
    then [ $FORCE -eq 0 ] && panic "This user already exists"
    else mkdir -p "$DATA_DIR/$USERNAME"
    fi

    if [ "$ONLY_TOKEN" -eq 0 ]
    then
        prompt NAME "Name (optional): "
        prompt EMAIL "Email (optional): "
    fi

    prompt_secret PASSWD "Password: "

    [ -n "$NAME" ] && echo "$NAME" > "$DATA_DIR/$USERNAME/name"
    [ -n "$EMAIL" ] && echo "$EMAIL" > "$DATA_DIR/$USERNAME/email"
    echo "$TOKEN" | gpg --batch --yes --passphrase "$PASSWD" -o "$DATA_DIR/$USERNAME/token" -c || panic $? "Encryption failed"

elif [ -d "$DATA_DIR/$USERNAME" ]
then # decrypt

    if [ "$ONLY_TOKEN" -eq 0 ]
    then
        [ -f "$DATA_DIR/$USERNAME/name" ] && NAME="$(cat "$DATA_DIR/$USERNAME/name")" && git config --global user.name "$NAME"
        [ -f "$DATA_DIR/$USERNAME/email" ] && EMAIL="$(cat "$DATA_DIR/$USERNAME/email")" && git config --global user.email "$EMAIL"
    fi

    prompt_secret PASSWD "Password: "

    SECRET=$(gpg --batch --passphrase "$PASSWD" -d "$DATA_DIR/$USERNAME/token" 2> /dev/null)
    [ -z "$SECRET" ] && panic "Password was incorrect"
    _approve "$URL" "$USERNAME" "$SECRET" || panic $? "Approval failed"

    CRED_HELPER="$(index 1 $(git config credential.helper))"

    if [ "$CRED_HELPER" = "cache" ]
    then echo "Found token \"$SECRET\" and cached it for a limited time."
    else echo "Found token \"$SECRET\"."
    fi

    # Warnings:

    if [ -n "$(climb .git)" ] && [ "$ONLY_TOKEN" -eq 0 ] && [ "$(_get_last_author)" != "$NAME <$EMAIL>" ]
    then
        echo ""
        echo "WARNING: The last commit seems to have been made by someone other than you."
        echo "Is this correct? The commit was done by"
        echo "  $(_get_last_author)"
    fi

    if [ "$CRED_HELPER" != "cache" ]
    then
        echo ""
        echo "WARNING: git credential-cache is disabled, you will have to enter the token"
        echo "manually or run git-token again after enabling. Enable git credential-cache"
        echo "globally with"
        echo "> git token -e"
    fi

else panic "Cannot find \"$DATA_DIR/$USERNAME\" containing the requested token."
fi

