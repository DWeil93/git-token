#! /bin/sh
# Manage git tokens with password encrypted files.
#
# Author: Kaj Munhoz Arfvidsson


###############
## CONSTANTS ##
###############


DATA_DIR="$HOME/.local/share/git-token"
GIT_CRED="$HOME/.git-credentials"


###############
## FUNCTIONS ##
###############


usage() {
    echo 'Usage: git-token [-hr] USERNAME [TOKEN]'
}

help() {
    usage
    cat << EOF
Manage git tokens with password protected files.

Options:
    -h, --help          Show this help message
    -r, --remove        Remove token with name USERNAME
    -e, --enable        Enable git credentials in the local repository

To save a token: git-token adam xxyyzz
The program will encrypt with gnupg a file named "adam"
containing "xxyyzz" to the directory ~/.local/share/git-token.

To load a token: git-token adam
The program will try to decrypt the file
~/.local/share/git-token/adam and print the contents, as well as,
save the token in ~/.git-credentials for a limited time (10m).
EOF
}

panic() {
    [ $# -gt 0 ] && echo Error: "$@"
    usage
    exit 0
}

index() {
    shift "$1"
    [ -z "$1" ] && panic "This index is empty"
    echo "$1"
}


############
## SCRIPT ##
############


# default program arguments
REMOVE=0
ENABLE=0

# parse program arguments
while getopts ":hrf-::" OPT; do
    if [ "$OPT" = "-" ]; then
        # support for long arguments
        OPT="${OPTARG%%=*}"
        OPTARG="${OPTARG#$OPT}"
        OPTARG="${OPTARG#=}"
    fi
    case $OPT in
        h | help ) help ; exit 0 ;;
        r | remove) REMOVE=1 ;;
        e | enable) ENABLE=1 ;;
        * ) panic "Unrecognized option \"$OPT\"" ;;
    esac
done

# get program arguments
case $# in
    1 ) USERNAME=$(index $OPTIND "$@") ;;
    2 ) USERNAME=$(index $OPTIND "$@") ; [ ! $REMOVE ] && TOKEN=$(index $((OPTIND+1)) "$@");;
    * )
        [ $# -lt 1 ] && panic "Missing argument USERNAME"
        [ $# -gt 2 ] && panic "Too many arguments"
    ;;
esac

# remove option
[ $REMOVE ] && [ -f "$DATA_DIR/$USERNAME" ] && rm "$DATA_DIR/$USERNAME" && exit 0

# enable git credentials option
[ $ENABLE ] && git config credential.helper store

# get token from stdin if the token is, e.g. piped in
[ -p /dev/stdin ] && read -r line && TOKEN=$line

# check deps
[ ! "$(command -v gpg)" ] && panic "Missing dependency \"gnupg\""

# Retrieve password
stty -echo
printf "Password: "
read -r PASSWD
stty echo
printf "\n"

# encrypt/decrypt
if [ -n "$TOKEN" ]; then
    [ ! -d "$DATA_DIR" ] && mkdir -p "$DATA_DIR"
    [ -f "$DATA_DIR/$USERNAME" ] && panic "This name already exists"
    echo "$TOKEN" | gpg --batch --passphrase "$PASSWD" -o "$DATA_DIR/$USERNAME" -c
elif [ -f "$DATA_DIR/$USERNAME" ]; then
    SECRET=$(gpg --batch --passphrase "$PASSWD" -d "$DATA_DIR/$USERNAME" 2> /dev/null)
    echo "rm '$GIT_CRED'" | at now +10 minutes 2> /dev/null
    echo "Token \"$SECRET\" written to clipboard and saved to git-credentials for 10 min."
else
    panic "File $DATA_DIR/$USERNAME does not exist"
fi


